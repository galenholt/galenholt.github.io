% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/selectcreator.R
\name{selectcreator}
\alias{selectcreator}
\title{Helper to handle different ways we might choose columns}
\usage{
selectcreator(selectvals, data, failmissing = TRUE)
}
\arguments{
\item{selectvals}{the selection of columns. Can be character, bare names, or
\code{tidyselect} syntax, e.g. \code{tidyselect::starts_with()}. If \code{tidyselect}, it can include
objects, but they need to be \verb{!!}. For example, if \code{prefix = 'ABC'}, to
select columns starting with that prefix, should call \code{selectvals = tidyselect::starts_with(!!prefix)}}

\item{data}{a tibble or dataframe to find the columns}

\item{failmissing}{logical, default \code{TRUE}: fail if the requested grouping or
aggregation columns not exist. If \code{FALSE}, proceed with those that do exist
and silently drop those that don't}
}
\value{
a character vector of column names. The intention is to use them in
\code{dplyr::group_by} or \code{select} with \code{dplyr::select(dplyr::across({{output}}))}. The underlying
\code{eval_select} returns a named integer vector giving column indices, but we
return only the names because in use the indices may not be stable
throughout the calling function(s)
}
\description{
Tidyselect has a robust way of selecting columns, but we often need to do
that selection indirectly- ie pass the selecting in as an argument to an
outer function. There are a number of ways to do this, but this is reasonably
robust and general, relying on using \code{tidyselect} itself. Allows passing
character vectors, bare names, or tidyselect syntax, provided this function
is called at the right place in the call stack
}
