---
title: "Analysing spatially autocorrelated data with spaMM"
format: html
---

```{r setup}
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())

```

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(spaMM)
library(foreach)
```

```{r}
devtools::load_all()
```

I often work with spatially autocorrelated data, and want to estimate fixed effects while dealing with autocorrelation (and typically, estimate the autocorrelation as well). I also often work with the [spaMM](https://gitlab.mbb.univ-montp2.fr/francois/spamm-ref) package, which was built for this, but usually use it for other things. Here, I'll see if it works for the sorts of data we often encounter. They're often not quite what we'd think of as geostatistics, but and might be any sort of autocorrelated sequence, e.g. sections of stream.

## Testing

I'll test with a modeled autocorrelated sequence with known AC, and then modify with fixed effects.

I only want a line, at least at first, so grab one row. (ac2d should be fixed to work with 1)

```{r}
oned <- ac2d(n_x = 100, n_y = 10, rho_x = 0.5, printStats = TRUE)

oned <- oned[1, ]
```

```{r}
checkac <- acf(oned)
checkac$acf[2]
```

### Just the AC, no fixed effects

Can spaMM just pick that up without a fixed effect? Ie the only thing there is the data, with no predictor.

```{r}
onedf <- tibble(obs = oned, x = 1:length(obs))
```

```{r}
no_fix <- fitme(obs ~ 1 + Matern(1|x), data = onedf, fixed = list(nu=0.5))
```

According to [spaMM](https://gitlab.mbb.univ-montp2.fr/francois/spamm-ref/-/blob/master/vignettePlus/spaMMintro.pdf), Matern with $\nu = 0.5$ fits a spatial correlation $\exp(-\rho d)$ , which superficially looks a lot like what we have for the correlation length, $\tau$, where the autocorrelation at distance *d* is $A(d) = e^{(-d/\tau)}$. Since $A(d) = \rho^d$, $\tau = -1/ln(\rho)$ (and $\rho = exp{(-1/\tau)}$). So is this really just fitting $1/\tau$ and calling it $\rho$?

```{r}
get_ranPars(no_fix, which = 'corrPars')[[1]]$rho
# used realised lag-1 rho rather than defined
1/(-1/log(checkac$acf[2]))
```

Sure looks like it.

```{r}


alltib <- foreach(i = 0:9, 
                  .combine = bind_rows,
                  .multicombine = TRUE) %do% {
  oned <- ac2d(n_x = 100, n_y = 10, rho_x = i/10, printStats = FALSE)
  # doing this on the matrix does all the crosses. Don't want htat
  rhotib <- foreach(j = 1:nrow(oned),
                    .combine = bind_rows,
                    .multicombine = TRUE) %do% {
        checkac <- acf(oned[j, ], plot = FALSE)
        onedf <- tibble(obs = oned[j, ], x = 1:length(obs))
        no_fix <- fitme(obs ~ 1 + Matern(1|x), data = onedf, fixed = list(nu=0.5))
        spamout <- get_ranPars(no_fix, which = 'corrPars')[[1]]$rho
        acftau <- 1/(-1/log(checkac$acf[2]))
        
        tibble(spamout = spamout, acftau = acftau, 
               rho = i/10, tau = 1/(-1/log(i/10)))

                    }
  rhotib

}
```

```{r}
alltib |> 
  pivot_longer(-rho) |> 
ggplot(aes(x = rho, y = value, color = name)) +
  stat_summary() +
  ggtitle("All are 1/tau in the usual sense")
```

So, spaMM does a good job once there's about a rho of 0.2. Perhaps that's step 1: ask if there's enough AC to care. And if we're getting 1/taus of \> 2 or 3, maybe say it's likely not tellng us much? That's rhos of

```{r}
exp(-1/ (1/2))
exp(-1/ (1/3))
```

Which we wouldn't call sig- see the ac plot above- it doesn't go sig until 0.2, which is a 1/tau of

```{r}
1/(-1/log(0.2))
```

Obviously sample size will change that. Not sure if larger sample size will help spamm, it's slow when things get big.

## Testing covariates

OK, now let's see if this continues to work and returns useful estimates for covariates. Lets say there's some covariate. This is really just hand-building the example in the spaMM intro, but a bit more relevant to the issues we have here.

```{r}
oned <- ac2d(n_x = 100, n_y = 10, rho_x = 0.5, printStats = TRUE)

oned <- oned[1, ]
```

```{r}
fdf <- tibble(obs = oned, x = 1:length(obs))

```

### Categorical

so far, same as above. Now we want a categorical fixed effect (spaMM does quant, but we'll really want both, I think)

```{r}
fdf$cat_q <- sample(3, nrow(fdf), replace = TRUE)
fdf <- fdf |> 
  # make additive, otherwise I'm adjusting the group variance, not the group means
  mutate(resp_c = obs + cat_q,
         cat = paste0('c', cat_q)) 
```

```{r}
withfix <- fitme(resp_c ~ cat + Matern(1|x), data = fdf, fixed = list(nu=0.5))
```

```{r}
summary(withfix)
```

That's pretty good, really

```{r}
ggplot(fdf, aes(x = x, y = resp_c, color = cat)) + geom_point()
```

How does that compare to when I ignore ac?

```{r}
flm <- lm(resp_c ~ cat, data = fdf)
summary(flm)
```

That's just as bad, really

### Quantitative, independent

Now, as in the spaMM intro, let's assume we have an independent quant covariate

```{r}
fdf$quant <- sample(nrow(fdf))
fdf <- fdf |> 
  mutate(resp_q = obs+quant*0.1)

withq <- fitme(resp_q ~ quant + Matern(1|x), data = fdf, fixed = list(nu=0.5))
```

```{r}
summary(withq)
```

That's pretty good for both the rho and the estimate

### Trend

Now, let's say there's a trend with x itself.

```{r}
fdf <- fdf |> 
  mutate(resp_trend = obs + x*0.1)

witht <- fitme(resp_trend ~ x + Matern(1|x), data = fdf, fixed = list(nu=0.5))
```

```{r}
summary(witht)
```

Also does a good job with that.

### Everything?

What happens if I just hit it with everything?

```{r}
fdf <- fdf |> 
  mutate(resp_all = obs + x*0.1 + 1*cat_q + quant*0.1)

withall <- fitme(resp_all ~ x + cat + quant + Matern(1|x),
                 data = fdf, fixed = list(nu=0.5))
```

```{r}
summary(withall)
```

That's pretty good. Though noting that I don't actually have any residual error on any of this. Well, except that the 2d ac has error variance epsilon. It's not quite the same, but it's something.

## Residuals

```{r}
fdf <- fdf |> 
  mutate(resp_resid = obs + x*0.1 + 1*cat_q + quant*0.1 + rnorm(nrow(fdf), sd = sqrt(1)))

withresid <- fitme(resp_resid ~ x + cat + quant + Matern(1|x),
                 data = fdf, fixed = list(nu=0.5))
```

```{r}
summary(withresid)
```

That's pretty good still. The random AC inflates some. Obviously it will change depending on the size of that residual variance. The sd of the data *without* the residual is

```{r}
sd(fdf$resp_all)
```
