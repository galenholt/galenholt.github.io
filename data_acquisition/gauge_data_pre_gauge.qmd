---
title: "Gauge data and gauged period"
author: "Galen Holt"
---

```{r}
library(foreach)
library(dplyr)
library(hydrogauge)
library(reticulate)
```

```{python}
import mdba_gauge_getter as gg
```

We often end up needing to pull gauge data for lots of projects. If we just want flow data, and especially if we're working in python, there's the [mdba_gauge_getter](https://github.com/MDBAuth/MDBA_Gauge_Getter), and I've written [{hydrogauge}](https://github.com/galenholt/hydrogauge) for R and expanded it to cover Victoria, NSW, and Qld. A primary advantage of {hydrogauge} is that it can access more of the API calls and return any desired variables.

One issue we often end up having is wanting to grab gauge data for a range of dates that may or may not go earlier than a gauge was put in place. There's actually an issue with the Kisters API for that, where it silently returns values of 0 for those dates, which is not good. Because it comes from the API itself, it affects both packages.

For example, we can go to the website and find the period of record for NSW gauge 410007 (`gauges_to_pull[138]`) is 10/01/1979 - present. We'll show first what happens for three situations with both `mdba_gauge_getter` and `hydrogauge`

1.  all dates pre-gauge

2.  all dates within period

3.  dates before and after

and then we'll show how to handle it in {hydrogauge}.

### Set some variables

```{r}
gaugenum <- '410007'

# initial date (plus a couple days to be sure there's data)
gaugestart = lubridate::ymd(19790110)
# a week days later- this data should all exist
weeklater <- lubridate::ymd(19790117)
# Before initial date
weekbefore = lubridate::ymd(19790103)
daybefore <- lubridate::ymd(19790109)
```

## All dates pre-gauge

If we ask for the period before the gauge is operational {hydrogauge} passes the API error through.

```{r}
#| error: true
get_ts_traces(portal = 'NSW', 
                site_list = gaugenum, 
                var_list = '141',
                start_time = weekbefore,
                end_time = daybefore,
                interval = 'day',
                data_type = 'mean')
```

We get an empty dataframe from `mdba_gauge_getter`

```{python}
#| message: false
demo_levs_pre = gg.gauge_pull(r.gaugenum, start_time_user = r.weekbefore, end_time_user = r.daybefore)
demo_levs_pre
```

So, that's slightly different behavior, but neither is returning misleading data.

## All dates with gauge

Now {hydrogauge} gives a dataframe.

```{r}
get_ts_traces(portal = 'NSW', 
                site_list = gaugenum, 
                var_list = '141',
                start_time = gaugestart,
                end_time = weeklater,
                interval = 'day',
                data_type = 'mean')
```

As does `mdba_gauge_getter`

```{python}
#| message: false
demo_levs_exists = gg.gauge_pull(r.gaugenum, start_time_user = r.gaugestart, end_time_user = r.weeklater)
demo_levs_exists
```

That again returns what it should. All the dates have data.

## Dates spanning gauge start

Now {hydrogauge} gives a dataframe, but that initial period has `value = 0`, which is wrong. It should be NA, but the API returns 0 silently.

```{r}
get_ts_traces(portal = 'NSW', 
                site_list = gaugenum, 
                var_list = '141',
                start_time = weekbefore,
                end_time = weeklater,
                interval = 'day',
                data_type = 'mean')
```

The same thing happens with `mdba_gauge_getter`

```{python}
#| message: false
demo_levs_span = gg.gauge_pull(r.gaugenum, start_time_user = r.weekbefore, end_time_user = r.weeklater)
demo_levs_span
```

So, that's not good. Especially the silent part

# Solution

I can't figure out how to use `mdba_gauge_getter` to automatically query the period of record. So for that, you have to make sure to check for every request.

On the other hand, {hydrogauge} can hit other API calls (`get_variable_list`) that return the period of record, and then use them to call `get_ts_traces`. We can do this manually, which is a bit of a hassle, because `get_variable_list` returns all the variables, and we have to remember to filter for '100' if we want '100' or '140', or '141' (see [testing hydrogauge](../hydrogauge/hydrogauge_testing.qmd)).

With multiple sites, we always will have to loop, since the `start_time`s (and maybe `end_time`) will differ.

```{r}
varl <- get_variable_list(portal = 'NSW', 
                          site_list = c('422028', '410007'),
                          datasource = 'A')

varl100 <- varl %>% dplyr::filter(variable == "100.00")

# If we have multiple sites, we have to loop over them.
siteout_m <- foreach(i = 1:nrow(varl100)) %do% {
  get_ts_traces(portal = 'NSW', 
                site_list = varl100$site[i], 
                var_list = '141',
                start_time = varl100$period_start[i],
                end_time = varl100$period_end[i],
                interval = 'day',
                data_type = 'mean')
}
```

That produces a list of dataframes for the period of record, which we can check do not have leading zeros.

```{r}
head(siteout_m[[1]] |> select(time, value, site_name, everything() ))
head(siteout_m[[2]] |> select(time, value, site_name, everything() ))
```

The cleaner way used to be to use `get_ts_traces2`, which does the hunting for dates automatically when given `start_time = 'all'` and `end_time = 'all'`. This function is now deprecated while a more general solution is found.

```{r}
#| eval: false
siteout_a <- get_ts_traces2(portal = 'NSW', 
                            site_list = c('422028', '410007'), 
                            var_list = "141",
                            start_time = 'all',
                            end_time = 'all',
                            interval = 'day',
                            data_type = 'mean',
                            returnformat = 'sitelist')
```

That's really just a wrapper over the manual method above, and also does not contain leading zeros. It can return a long dataframe if `returnformat = 'df'`, but for comparison I've used `returnformat = 'sitelist'`.

```{r}
#| eval: false
head(siteout_a[[1]] |> select(time, value, site_name, everything() ))
head(siteout_a[[2]] |> select(time, value, site_name, everything() ))
```
